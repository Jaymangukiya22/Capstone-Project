version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: quiz-postgres
    environment:
      POSTGRES_USER: quiz_user
      POSTGRES_PASSWORD: quiz_password
      POSTGRES_DB: quiz_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - quiz-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U quiz_user -d quiz_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: quiz-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - quiz-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend Application
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    working_dir: /app
    environment:
      DATABASE_URL: "postgresql://quiz_user:quiz_password@postgres:5432/quiz_db?schema=public"
      REDIS_URL: "redis://redis:6379"
      PORT: 3000
      NODE_ENV: development
      BASIC_AUTH_USERNAME: aryan
      BASIC_AUTH_PASSWORD: admin
      JWT_SECRET: a8e27c593b7494948e9b5159f94a50f8
      JWT_EXPIRES_IN: 24h
      CACHE_TTL: 300
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - quiz-network
    volumes:
      - .:/app
      - /app/node_modules
    command: sh -c "npx prisma generate && npm run dev"
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  quiz-network:
    driver: bridge
