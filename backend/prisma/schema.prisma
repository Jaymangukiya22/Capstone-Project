// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  FACULTY
  STUDENT
}

enum QuizStatus {
  DRAFT
  SCHEDULED
  ACTIVE
  COMPLETED
  CANCELLED
}

enum MatchStatus {
  WAITING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  firstName String
  lastName  String
  role      UserRole @default(STUDENT)
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  createdCourses    Course[]       @relation("CourseCreator")
  enrollments       Enrollment[]
  createdQuizzes    Quiz[]         @relation("QuizCreator")
  playerMatches     Match[]        @relation("MatchPlayer")
  opponentMatches   Match[]        @relation("MatchOpponent")
  eloRatings        EloRating[]
  leaderboardEntries LeaderboardEntry[]

  @@map("users")
}

model Course {
  id          String   @id @default(cuid())
  title       String
  description String?
  code        String   @unique // Course code like "CS101"
  imageUrl    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  creatorId    String
  creator      User         @relation("CourseCreator", fields: [creatorId], references: [id])
  enrollments  Enrollment[]
  quizzes      Quiz[]
  eloRatings   EloRating[]
  leaderboards Leaderboard[]

  @@map("courses")
}

model Enrollment {
  id         String   @id @default(cuid())
  enrolledAt DateTime @default(now())

  // Relations
  userId   String
  courseId String
  user     User   @relation(fields: [userId], references: [id])
  course   Course @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId])
  @@map("enrollments")
}

model Quiz {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      QuizStatus @default(DRAFT)
  timeLimit   Int        // Time limit per question in seconds
  scheduledAt DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  creatorId String
  courseId  String
  creator   User       @relation("QuizCreator", fields: [creatorId], references: [id])
  course    Course     @relation(fields: [courseId], references: [id])
  questions Question[]
  matches   Match[]

  @@map("quizzes")
}

model Question {
  id          String   @id @default(cuid())
  text        String
  imageUrl    String?
  timeLimit   Int      // Individual question time limit in seconds
  points      Int      @default(100) // Base points for correct answer
  order       Int      // Question order in quiz
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  quizId  String
  quiz    Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options Option[]
  answers Answer[]

  @@map("questions")
}

model Option {
  id        String   @id @default(cuid())
  text      String
  imageUrl  String?
  isCorrect Boolean  @default(false)
  order     Int      // Option order (A, B, C, D)
  createdAt DateTime @default(now())

  // Relations
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answers    Answer[]

  @@map("options")
}

model Match {
  id          String      @id @default(cuid())
  status      MatchStatus @default(WAITING)
  startedAt   DateTime?
  completedAt DateTime?
  playerScore Int         @default(0)
  opponentScore Int       @default(0)
  createdAt   DateTime    @default(now())

  // Relations
  quizId     String
  playerId   String
  opponentId String
  quiz       Quiz     @relation(fields: [quizId], references: [id])
  player     User     @relation("MatchPlayer", fields: [playerId], references: [id])
  opponent   User     @relation("MatchOpponent", fields: [opponentId], references: [id])
  answers    Answer[]

  @@map("matches")
}

model Answer {
  id           String   @id @default(cuid())
  timeSpent    Int      // Time spent on question in milliseconds
  points       Int      @default(0) // Points earned for this answer
  answeredAt   DateTime @default(now())

  // Relations
  matchId    String
  questionId String
  optionId   String?  // null if no answer selected
  match      Match    @relation(fields: [matchId], references: [id])
  question   Question @relation(fields: [questionId], references: [id])
  option     Option?  @relation(fields: [optionId], references: [id])

  @@unique([matchId, questionId])
  @@map("answers")
}

model EloRating {
  id        String   @id @default(cuid())
  rating    Int      @default(1200) // Starting ELO rating
  matches   Int      @default(0)    // Number of matches played
  wins      Int      @default(0)
  losses    Int      @default(0)
  updatedAt DateTime @updatedAt

  // Relations
  userId   String
  courseId String
  user     User   @relation(fields: [userId], references: [id])
  course   Course @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId])
  @@map("elo_ratings")
}

model Leaderboard {
  id        String   @id @default(cuid())
  season    String   @default("current") // For seasonal leaderboards
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  courseId String
  course   Course             @relation(fields: [courseId], references: [id])
  entries  LeaderboardEntry[]

  @@unique([courseId, season])
  @@map("leaderboards")
}

model LeaderboardEntry {
  id       String @id @default(cuid())
  rank     Int
  rating   Int
  matches  Int
  wins     Int
  losses   Int
  winRate  Float  @default(0.0)

  // Relations
  leaderboardId String
  userId        String
  leaderboard   Leaderboard @relation(fields: [leaderboardId], references: [id])
  user          User        @relation(fields: [userId], references: [id])

  @@unique([leaderboardId, userId])
  @@map("leaderboard_entries")
}
