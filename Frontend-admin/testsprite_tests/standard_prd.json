{
  "meta": {
    "project": "Quiz Management System",
    "date": "2025-09-13",
    "prepared_by": "Software Development Manager"
  },
  "product_overview": "The Quiz Management System is a comprehensive platform designed to create, manage, and deliver quizzes with support for hierarchical categories, multiple quiz types, and flexible question formats. It features a robust backend with RESTful API, a modern React-based frontend, and integration for seamless quiz building and performance tracking.",
  "core_goals": [
    "Provide hierarchical category management supporting unlimited nesting levels.",
    "Enable creation and management of diverse quizzes with multiple game types and difficulty settings.",
    "Support flexible question management with MCQ and boolean types, including multiple correct answers.",
    "Offer comprehensive CRUD operations via API endpoints for categories, quizzes, questions, and quiz attempts.",
    "Implement secure authentication with JWT and role-based access control.",
    "Provide observability with logging, tracing, and performance metrics.",
    "Ensure smooth frontend-backend integration with real-time data loading and state management.",
    "Support import/export of questions via Excel files for bulk operations.",
    "Facilitate quiz attempts tracking with detailed statistics and leaderboards.",
    "Enable easy deployment with Docker containers and environment configuration."
  ],
  "key_features": [
    "Hierarchical Categories Management: Create, read, update, and delete categories and subcategories with unlimited nesting, displayed in a tree structure.",
    "Quiz Builder: Interactive UI to create quizzes linked to categories with settings for difficulty, time limits, and question count.",
    "Question Bank Management: Advanced management of questions including CRUD, bulk import/export via Excel, and category filtering.",
    "Quiz Management Interface: List, filter, search, and manage quizzes with support for multiple game types and metadata.",
    "Quiz Attempts and Leaderboards: Track quiz attempts, submit answers, and display user statistics and leaderboards.",
    "Authentication and Authorization: Basic authentication for development and JWT-based auth for production with role assignments.",
    "API Integration Layer: Centralized API client with Axios, interceptors, and error handling encapsulated in services.",
    "UI Components: Reusable React components built with shadcn/ui and Tailwind CSS for forms, modals, tables, and navigation.",
    "Observability: Integrated Winston logging, OpenTelemetry tracing, and Prometheus metrics for health and performance monitoring.",
    "Dockerized Deployment: Multi-stage Docker builds, with PostgreSQL and Redis services orchestrated via docker-compose."
  ],
  "user_flow_summary": [
    "User registers and logs in to access the quiz management platform.",
    "User creates categories and subcategories via the hierarchical tree view.",
    "User adds questions either individually or bulk imports them via Excel files, assigning them to categories.",
    "User creates quizzes by selecting categories and setting quiz metadata such as difficulty and time limits.",
    "User manages quizzes via listing, filtering, and editing quiz details.",
    "Players start quiz attempts, submit answers, and complete quizzes.",
    "User views real-time quiz statistics and leaderboards to analyze performance.",
    "Admin uses the API test interface to verify backend connectivity and operations.",
    "User switches themes and navigates the app using responsive sidebar navigation."
  ],
  "validation_criteria": [
    "All API endpoints must return correct HTTP status codes and consistent error responses with error messages and timestamps.",
    "Category operations must support hierarchical nesting with correct parent-child relationships and cascade deletions.",
    "Quiz creation must validate presence of required fields and enforce limits on questions and timing.",
    "Question entries require validation of option counts (2-4) and at least one correct answer specified.",
    "Authentication must correctly enforce role-based access and token expiration after 24 hours.",
    "Frontend components must handle API loading states, errors, and proper data synchronization.",
    "Import and export operations for questions must correctly parse or generate Excel files with appropriate data mappings.",
    "Logging and tracing should be enabled and visible for all key backend operations.",
    "Docker containers must start correctly and health endpoints respond within performance thresholds.",
    "Integration tests must pass covering category, quiz, question CRUD, and quiz attempt flows."
  ],
  "code_summary": {
    "tech_stack": [
      "TypeScript",
      "React 19",
      "Vite",
      "Tailwind CSS",
      "shadcn/ui",
      "Axios",
      "Lucide React"
    ],
    "features": [
      {
        "name": "Categories Management",
        "description": "Complete CRUD operations for categories and subcategories with hierarchical tree structure, API integration for creating, updating, and deleting categories",
        "files": [
          "src/pages/Categories.tsx",
          "src/components/categories/CategoryTree.tsx",
          "src/components/categories/StatsCards.tsx",
          "src/components/categories/DetailPanel.tsx",
          "src/components/categories/modals/AddCategoryModal.tsx",
          "src/components/categories/modals/AddSubcategoryModal.tsx",
          "src/components/categories/modals/AddQuizModal.tsx",
          "src/services/categoryService.ts"
        ]
      },
      {
        "name": "Quiz Builder",
        "description": "Interactive quiz creation interface with category selection, form validation, and backend integration for quiz creation",
        "files": [
          "src/pages/QuizBuilder.tsx",
          "src/components/quiz-settings/QuizSettingsTab.tsx",
          "src/components/publish/PublishReviewTab.tsx",
          "src/services/quizService.ts"
        ]
      },
      {
        "name": "Quiz Management",
        "description": "Comprehensive quiz management interface with listing, filtering, search, and CRUD operations for quizzes",
        "files": [
          "src/pages/QuizManagement.tsx",
          "src/hooks/useQuizzes.ts"
        ]
      },
      {
        "name": "Question Bank",
        "description": "Advanced question bank management with category tree navigation, question CRUD operations, bulk import/export, and Excel integration",
        "files": [
          "src/pages/QuestionBank.tsx",
          "src/components/question-bank/QuestionTreePanel.tsx",
          "src/components/question-bank/QuestionListPanel.tsx",
          "src/components/question-bank/QuestionCard.tsx",
          "src/components/question-bank/AddEditQuestionModal.tsx",
          "src/components/question-bank/ImportCsvDialog.tsx",
          "src/services/questionBankService.ts",
          "src/hooks/useQuestionBank.ts",
          "src/utils/questionUtils.ts"
        ]
      },
      {
        "name": "Questions Management",
        "description": "Question management for quizzes with CRUD operations, validation, and quiz association",
        "files": [
          "src/components/questions/QuestionsTab.tsx",
          "src/components/questions/QuestionCard.tsx",
          "src/components/questions/EditQuestionModal.tsx",
          "src/components/questions/QuestionBankModal.tsx",
          "src/services/questionService.ts",
          "src/components/examples/QuestionExample.tsx"
        ]
      },
      {
        "name": "API Integration Layer",
        "description": "Centralized API client with interceptors, error handling, and service layer for backend communication",
        "files": [
          "src/services/api.ts",
          "src/services/index.ts",
          "src/hooks/useApi.ts",
          "src/types/api.ts"
        ]
      },
      {
        "name": "UI Components System",
        "description": "Reusable UI components built with shadcn/ui including forms, modals, tables, and navigation",
        "files": [
          "src/components/ui/button.tsx",
          "src/components/ui/input.tsx",
          "src/components/ui/select.tsx",
          "src/components/ui/textarea.tsx",
          "src/components/ui/dialog.tsx",
          "src/components/ui/table.tsx",
          "src/components/ui/breadcrumb.tsx",
          "src/components/ui/tabs.tsx",
          "src/components/ui/label.tsx"
        ]
      },
      {
        "name": "Layout and Navigation",
        "description": "Application layout with sidebar navigation, theme switching, and responsive design",
        "files": [
          "src/components/layout/Layout.tsx",
          "src/components/layout/Sidebar.tsx",
          "src/components/layout/Header.tsx",
          "src/hooks/useTheme.ts"
        ]
      },
      {
        "name": "Students Management",
        "description": "Student management interface for user administration",
        "files": [
          "src/pages/Students.tsx"
        ]
      },
      {
        "name": "API Testing",
        "description": "Comprehensive API testing component for verifying backend connectivity and CRUD operations",
        "files": [
          "src/components/ApiTest.tsx"
        ]
      },
      {
        "name": "Type Definitions",
        "description": "TypeScript type definitions for API responses, questions, quizzes, and categories",
        "files": [
          "src/types/api.ts",
          "src/types/question.ts",
          "src/types/quiz-settings.ts",
          "src/types/index.ts"
        ]
      },
      {
        "name": "Mock Data and Utilities",
        "description": "Mock data for development and utility functions for data manipulation",
        "files": [
          "src/data/mockData.ts",
          "src/data/mockQuestions.ts",
          "src/utils/questionUtils.ts"
        ]
      }
    ]
  }
}
