"use strict";(self.webpackChunkquiz_app_backend=self.webpackChunkquiz_app_backend||[]).push([[443],{6316:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"architecture","title":"Architecture Overview","description":"System Architecture","source":"@site/docs/architecture.md","sourceDirName":".","slug":"/architecture","permalink":"/backend-docs/docs/architecture","draft":false,"unlisted":false,"editUrl":"https://github.com/your-org/quizup-backend/tree/main/docs/architecture.md","tags":[],"version":"current","lastUpdatedBy":null,"lastUpdatedAt":null,"frontMatter":{},"sidebar":"tutorialSidebar","next":{"title":"Getting Started with QuizUP Backend API","permalink":"/backend-docs/docs/intro"}}');var s=i(5668),r=i(7663);const a={},c="Architecture Overview",o={},l=[{value:"System Architecture",id:"system-architecture",level:2},{value:"\ud83c\udfd7\ufe0f Service Architecture",id:"\ufe0f-service-architecture",level:3},{value:"\ud83d\udd27 Main API Service (Port 3000)",id:"-main-api-service-port-3000",level:3},{value:"Core Responsibilities",id:"core-responsibilities",level:4},{value:"Technology Stack",id:"technology-stack",level:4},{value:"API Structure",id:"api-structure",level:4},{value:"\u26a1 Match Service (Port 3001)",id:"-match-service-port-3001",level:3},{value:"Core Responsibilities",id:"core-responsibilities-1",level:4},{value:"Technology Stack",id:"technology-stack-1",level:4},{value:"WebSocket Events",id:"websocket-events",level:4},{value:"\ud83d\uddc4\ufe0f Database Design",id:"\ufe0f-database-design",level:3},{value:"PostgreSQL Schema",id:"postgresql-schema",level:4},{value:"Key Indexes",id:"key-indexes",level:4},{value:"\ud83d\udd04 Redis Caching Strategy",id:"-redis-caching-strategy",level:3},{value:"Cache Patterns",id:"cache-patterns",level:4},{value:"\ud83d\udee1\ufe0f Security Implementation",id:"\ufe0f-security-implementation",level:3},{value:"Authentication Flow",id:"authentication-flow",level:4},{value:"Authorization Middleware",id:"authorization-middleware",level:4},{value:"\ud83d\udcca Performance Optimizations",id:"-performance-optimizations",level:3},{value:"Database Optimization",id:"database-optimization",level:4},{value:"Caching Strategy",id:"caching-strategy",level:4},{value:"API Performance",id:"api-performance",level:4},{value:"\ud83d\udd0d Monitoring &amp; Observability",id:"-monitoring--observability",level:3},{value:"Logging Strategy",id:"logging-strategy",level:4},{value:"Health Check Endpoints",id:"health-check-endpoints",level:4},{value:"\ud83d\ude80 Deployment Configuration",id:"-deployment-configuration",level:3},{value:"Docker Configuration",id:"docker-configuration",level:4},{value:"Environment Configuration",id:"environment-configuration",level:4}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"architecture-overview",children:"Architecture Overview"})}),"\n",(0,s.jsx)(n.h2,{id:"system-architecture",children:"System Architecture"}),"\n",(0,s.jsxs)(n.p,{children:["The QuizUP backend follows a ",(0,s.jsx)(n.strong,{children:"microservices architecture"})," with two main services:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Main API Service"})," (Port 3000) - RESTful API for core functionality"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Match Service"})," (Port 3001) - WebSocket server for real-time gaming"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"\ufe0f-service-architecture",children:"\ud83c\udfd7\ufe0f Service Architecture"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-mermaid",children:'graph TB\n    subgraph "Client Applications"\n        A[React Admin Interface]\n        B[Mobile Apps]\n        C[Web Players]\n    end\n    \n    subgraph "Backend Services"\n        D[Main API Server :3000]\n        E[Match Service :3001]\n    end\n    \n    subgraph "Data Layer"\n        F[PostgreSQL Database]\n        G[Redis Cache/Sessions]\n    end\n    \n    subgraph "External Services"\n        H[File Storage]\n        I[Email Service]\n        J[Analytics]\n    end\n    \n    A --\x3e D\n    A --\x3e E\n    B --\x3e D\n    B --\x3e E\n    C --\x3e E\n    D --\x3e F\n    D --\x3e G\n    E --\x3e G\n    E --\x3e F\n    D --\x3e H\n    D --\x3e I\n    D --\x3e J\n'})}),"\n",(0,s.jsx)(n.h3,{id:"-main-api-service-port-3000",children:"\ud83d\udd27 Main API Service (Port 3000)"}),"\n",(0,s.jsx)(n.h4,{id:"core-responsibilities",children:"Core Responsibilities"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"User Management"}),": Authentication, authorization, profiles"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Content Management"}),": Categories, quizzes, questions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Quiz Administration"}),": CRUD operations for quiz content"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Analytics & Reporting"}),": Usage statistics and performance metrics"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"File Management"}),": Upload and storage of quiz assets"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"technology-stack",children:"Technology Stack"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Express.js"}),": Web framework for RESTful APIs"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Sequelize ORM"}),": Database abstraction and migrations"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"JWT Authentication"}),": Stateless authentication with refresh tokens"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Joi Validation"}),": Input validation and sanitization"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Winston Logging"}),": Structured logging with multiple transports"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Swagger/OpenAPI"}),": Comprehensive API documentation"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"api-structure",children:"API Structure"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"/api/\n\u251c\u2500\u2500 /auth              # Authentication endpoints\n\u251c\u2500\u2500 /users             # User management\n\u251c\u2500\u2500 /categories        # Category hierarchy\n\u251c\u2500\u2500 /quizzes           # Quiz CRUD operations\n\u251c\u2500\u2500 /questions         # Question bank management\n\u251c\u2500\u2500 /matches           # Match creation and management\n\u251c\u2500\u2500 /analytics         # Usage statistics\n\u2514\u2500\u2500 /admin             # Administrative functions\n"})}),"\n",(0,s.jsx)(n.h3,{id:"-match-service-port-3001",children:"\u26a1 Match Service (Port 3001)"}),"\n",(0,s.jsx)(n.h4,{id:"core-responsibilities-1",children:"Core Responsibilities"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Real-time Gaming"}),": WebSocket-based quiz gameplay"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Match Management"}),": Live game state synchronization"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Player Connections"}),": Managing concurrent player sessions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Scoring System"}),": Real-time score calculation and leaderboards"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"AI Opponents"}),": Automated player simulation"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"technology-stack-1",children:"Technology Stack"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Socket.io"}),": WebSocket server for real-time communication"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Redis Adapter"}),": Scaling WebSocket connections across instances"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Event-driven Architecture"}),": Asynchronous message handling"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"State Management"}),": In-memory and Redis-based state persistence"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Load Balancing"}),": Sticky sessions for WebSocket connections"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"websocket-events",children:"WebSocket Events"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Client to Server Events\ninterface ClientEvents {\n  authenticate: (data: AuthData) => void;\n  join_match: (matchId: string) => void;\n  submit_answer: (answer: AnswerData) => void;\n  player_ready: () => void;\n}\n\n// Server to Client Events  \ninterface ServerEvents {\n  match_joined: (data: MatchData) => void;\n  question_started: (question: QuestionData) => void;\n  answer_result: (result: ResultData) => void;\n  match_completed: (results: FinalResults) => void;\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"\ufe0f-database-design",children:"\ud83d\uddc4\ufe0f Database Design"}),"\n",(0,s.jsx)(n.h4,{id:"postgresql-schema",children:"PostgreSQL Schema"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"-- Core Tables\nUsers (id, email, username, password_hash, role, created_at)\nCategories (id, name, description, parent_id, created_at)\nQuizzes (id, title, description, category_id, difficulty, time_limit)\nQuestions (id, quiz_id, question_text, difficulty, created_by)\nOptions (id, question_id, option_text, is_correct)\n\n-- Gaming Tables\nMatches (id, quiz_id, status, created_by, max_players, created_at)\nMatchPlayers (match_id, user_id, score, joined_at)\nQuizAttempts (id, user_id, quiz_id, score, completed_at)\n"})}),"\n",(0,s.jsx)(n.h4,{id:"key-indexes",children:"Key Indexes"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"-- Performance Indexes\nCREATE INDEX idx_quizzes_category ON quizzes(category_id);\nCREATE INDEX idx_questions_quiz ON questions(quiz_id);\nCREATE INDEX idx_options_question ON options(question_id);\nCREATE INDEX idx_matches_status ON matches(status);\nCREATE INDEX idx_attempts_user_quiz ON quiz_attempts(user_id, quiz_id);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"-redis-caching-strategy",children:"\ud83d\udd04 Redis Caching Strategy"}),"\n",(0,s.jsx)(n.h4,{id:"cache-patterns",children:"Cache Patterns"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Frequently Accessed Data\ninterface CacheKeys {\n  user_session: `session:${userId}`;\n  quiz_data: `quiz:${quizId}`;\n  match_state: `match:${matchId}`;\n  leaderboard: `leaderboard:${quizId}`;\n  category_tree: 'categories:tree';\n}\n\n// Cache TTL Configuration\nconst CACHE_TTL = {\n  sessions: 86400,      // 24 hours\n  quiz_data: 3600,      // 1 hour  \n  match_state: 7200,    // 2 hours\n  leaderboards: 300,    // 5 minutes\n  category_tree: 1800   // 30 minutes\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"\ufe0f-security-implementation",children:"\ud83d\udee1\ufe0f Security Implementation"}),"\n",(0,s.jsx)(n.h4,{id:"authentication-flow",children:"Authentication Flow"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// JWT Token Structure\ninterface JWTPayload {\n  userId: number;\n  email: string;\n  role: 'admin' | 'faculty' | 'student';\n  iat: number;\n  exp: number;\n}\n\n// Refresh Token Rotation\ninterface RefreshTokenFlow {\n  login: () => { accessToken, refreshToken };\n  refresh: (token) => { newAccessToken, newRefreshToken };\n  logout: (token) => void; // Invalidate tokens\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"authorization-middleware",children:"Authorization Middleware"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Role-based Access Control\nconst authorize = (roles: Role[]) => {\n  return (req: Request, res: Response, next: NextFunction) => {\n    if (!req.user || !roles.includes(req.user.role)) {\n      return res.status(403).json({ error: 'Insufficient permissions' });\n    }\n    next();\n  };\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"-performance-optimizations",children:"\ud83d\udcca Performance Optimizations"}),"\n",(0,s.jsx)(n.h4,{id:"database-optimization",children:"Database Optimization"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Connection Pooling"}),": Configurable pool size based on load"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Query Optimization"}),": Eager loading with proper includes"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Pagination"}),": Offset-based pagination for large datasets"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Indexing Strategy"}),": Composite indexes for complex queries"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"caching-strategy",children:"Caching Strategy"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Redis Clustering"}),": High availability and horizontal scaling"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Cache Warming"}),": Preload frequently accessed data"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Cache Invalidation"}),": Event-based cache updates"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Memory Management"}),": LRU eviction policies"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"api-performance",children:"API Performance"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Response Compression"}),": Gzip compression for large payloads"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Rate Limiting"}),": Configurable limits per endpoint and user"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Request Optimization"}),": Batch operations where applicable"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Monitoring"}),": Performance metrics and alerting"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"-monitoring--observability",children:"\ud83d\udd0d Monitoring & Observability"}),"\n",(0,s.jsx)(n.h4,{id:"logging-strategy",children:"Logging Strategy"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Structured Logging Format\ninterface LogEntry {\n  timestamp: string;\n  level: 'debug' | 'info' | 'warn' | 'error' | 'critical';\n  message: string;\n  service: 'api' | 'match';\n  requestId?: string;\n  userId?: number;\n  metadata?: Record<string, any>;\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"health-check-endpoints",children:"Health Check Endpoints"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Service Health Monitoring\nGET /health          // Basic health status\nGET /health/detailed // Comprehensive system status\nGET /metrics         // Prometheus-compatible metrics\n"})}),"\n",(0,s.jsx)(n.h3,{id:"-deployment-configuration",children:"\ud83d\ude80 Deployment Configuration"}),"\n",(0,s.jsx)(n.h4,{id:"docker-configuration",children:"Docker Configuration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dockerfile",children:'# Multi-stage build\nFROM node:18-alpine AS builder\nWORKDIR /app\nCOPY package*.json ./\nRUN npm ci --only=production\n\nFROM node:18-alpine AS runtime  \nWORKDIR /app\nCOPY --from=builder /app/node_modules ./node_modules\nCOPY . .\nEXPOSE 3000\nCMD ["npm", "start"]\n'})}),"\n",(0,s.jsx)(n.h4,{id:"environment-configuration",children:"Environment Configuration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Environment Variables\ninterface Config {\n  NODE_ENV: 'development' | 'staging' | 'production';\n  PORT: number;\n  DB_HOST: string;\n  DB_NAME: string;\n  REDIS_URL: string;\n  JWT_SECRET: string;\n  LOG_LEVEL: LogLevel;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"This architecture ensures scalability, maintainability, and high performance for the QuizUP platform while providing clear separation of concerns and robust error handling."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},7663:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>c});var t=i(5512);const s={},r=t.createContext(s);function a(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);